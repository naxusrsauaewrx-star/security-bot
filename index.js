/**
 * Discord.js v14 AutoMod Bot with GUI Select Menu (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
 * Features:
 * - /menu command ‡∏™‡∏≤‡∏ò‡∏≤‡∏£‡∏ì‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏° Select Menu ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
 * - Anti-Spam: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ, ‡∏•‡πá‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏¢‡∏®‡∏ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
 * - Anti-Link: (discord invite, token, http/https) => ban
 * - Anti-Mass Mention: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ, ‡∏´‡∏≤‡∏Å mention @everyone/@here > 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏£‡∏ß‡∏° => ban (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
 * - Anti-Mass Mention 2: ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ, ‡∏´‡∏≤‡∏Å mention @everyone/@here 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á => ban (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô)
 * - Admin Role Monitor: ‡∏´‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏¢‡∏®‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏à‡∏∞‡πÇ‡∏î‡∏ô‡∏õ‡∏•‡∏î‡∏¢‡∏®‡∏ó‡∏±‡∏ô‡∏ó‡∏µ + log (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏õ‡∏¥‡∏î‡∏£‡∏∞‡∏ö‡∏ö)
 * - ‡∏ó‡∏∏‡∏Å Embed/log ‡∏°‡∏µ‡∏†‡∏≤‡∏û‡πÉ‡∏´‡∏ç‡πà‡∏à‡∏≤‡∏Å .env (IMG_URL)
 * - Log ‡πÅ‡∏ö‡∏ö embed ‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp ‡πÅ‡∏•‡∏∞ footer ‡πÑ‡∏ó‡∏¢ "¬© ùó¶ùó≤ùó∞ùòÇùóøùó∂ùòÅùòÜ ùóßùóºùóøùòÇ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"
 */

c
  Client,
  GatewayIntentBits,
  Partials,
  EmbedBuilder,
  ActionRowBuilder,
  StringSelectMenuBuilder,
  ButtonBuilder,
  ButtonStyle,
  PermissionsBitField,
  Events,
} = require("discord.js");
require("dotenv").config();

const client = new Client({
  intents: [
    GatewayIntentBits.Guilds,
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent,
    GatewayIntentBits.GuildMembers,
    GatewayIntentBits.GuildPresences,
  ],
  partials: [Partials.Message, Partials.Channel, Partials.GuildMember],
});

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö AutoMod
const config = {
  antiSpam: false,
  antiLink: false,
  antiMention: false,
  antiMention2: false,
  adminMonitor: false,
};

// Map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πÅ‡∏õ‡∏°‡πÅ‡∏•‡∏∞‡πÄ‡∏°‡∏ô‡∏ä‡∏±‡πà‡∏ô
const spamMap = new Map();
const mentionMap = new Map();

// ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
const SPAM_THRESHOLD = 2;
const SPAM_INTERVAL = 3000;
const MENTION_LIMIT = 3;

client.once("ready", async () => {
  console.log(`ü§ñ Logged in as ${client.user.tag}`);
  client.user.setActivity("/menu - AutoMod System");

  const menuCommand = {
    name: "menu",
    description: "‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö AutoMod",
  };

  await client.application.commands.set([menuCommand]);
  console.log("‚úÖ Slash command /menu registered globally.");
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á Select Menu
function createSelectMenu() {
  return new StringSelectMenuBuilder()
    .setCustomId("config-select")
    .setPlaceholder("üõ°Ô∏è ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î")
    .addOptions([
      {
        label: `Anti-Spam | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${config.antiSpam ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}`,
        description: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°",
        value: "antiSpam",
        emoji: "üï∏Ô∏è",
      },
      {
        label: `Anti-Link | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${config.antiLink ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}`,
        description: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÄ‡∏ä‡∏¥‡∏ç Discord",
        value: "antiLink",
        emoji: "üï∏Ô∏è",
      },
      {
        label: `Anti-Mass Mention (x${MENTION_LIMIT}) | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${config.antiMention ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}`,
        description: `‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà mention @everyone/@here ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${MENTION_LIMIT} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`,
        value: "antiMention",
        emoji: "üï∏Ô∏è",
      },
      {
        label: `Anti-Mass Mention (x1) | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${config.antiMention2 ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}`,
        description: "‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà mention @everyone/@here ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß",
        value: "antiMention2",
        emoji: "üï∏Ô∏è",
      },
      {
        label: `Admin Role Monitor | ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${config.adminMonitor ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}`,
        description: "‡∏£‡∏∞‡∏ö‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏î‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥",
        value: "adminMonitor",
        emoji: "üï∏Ô∏è",
      },
    ]);
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå InteractionCreate
client.on(Events.InteractionCreate, async (interaction) => {
  if (interaction.isChatInputCommand() && interaction.commandName === "menu") {
    if (!interaction.member.permissions.has(PermissionsBitField.Flags.Administrator)) {
      return interaction.reply({
        content: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ",
        ephemeral: true,
      });
    }

    const row = new ActionRowBuilder().addComponents(createSelectMenu());
    const linkButton = new ButtonBuilder()
      .setLabel("üåê Support Server")
      .setStyle(ButtonStyle.Link)
      .setURL("https://discord.gg/YOUR_SUPPORT_LINK");

    const buttonRow = new ActionRowBuilder().addComponents(linkButton);

    const embed = new EmbedBuilder()
      .setTitle("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö AutoMod")
      .setDescription("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î/‡∏õ‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ô‡∏π‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
      .setImage(process.env.IMG_URL || null)
      .setColor("Blue")
      .setFooter({ text: "¬© ùó¶ùó≤ùó∞ùòÇùóøùó∂ùòÅùòÜ ùóßùóºùóøùòÇ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô" })
      .setTimestamp();

    await interaction.reply({
      embeds: [embed],
      components: [row, buttonRow],
      ephemeral: true,
    });
  }

  if (interaction.isStringSelectMenu() && interaction.customId === "config-select") {
    const selected = interaction.values[0];
    config[selected] = !config[selected];

    const embed = new EmbedBuilder()
      .setTitle("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö AutoMod")
      .setDescription(`‡∏£‡∏∞‡∏ö‡∏ö **${selected}** ‡∏ñ‡∏π‡∏Å**${config[selected] ? "‡πÄ‡∏õ‡∏¥‡∏î" : "‡∏õ‡∏¥‡∏î"}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`)
      .setColor(config[selected] ? "Green" : "Red")
      .setImage(process.env.IMG_URL || null)
      .setFooter({ text: "¬© ùó¶ùó≤ùó∞ùòÇùóøùó∂ùòÅùòÜ ùóßùóºùóøùòÇ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô" })
      .setTimestamp();

    const row = new ActionRowBuilder().addComponents(createSelectMenu());

    await interaction.update({
      embeds: [embed],
      components: [row],
    });
  }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå MessageCreate
client.on(Events.MessageCreate, async (message) => {
  if (message.author.bot || !message.guild) return;

  const guild = message.guild;

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå Administrator ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const isAdmin = message.member.permissions.has(PermissionsBitField.Flags.Administrator);

  // Anti-Spam
  if (config.antiSpam && !isAdmin) { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç !isAdmin
    let timestamps = spamMap.get(message.author.id) || [];
    const now = Date.now();
    timestamps = timestamps.filter((t) => now - t < SPAM_INTERVAL);
    timestamps.push(now);
    spamMap.set(message.author.id, timestamps);

    if (timestamps.length >= SPAM_THRESHOLD) {
      try {
        await message.delete(); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await message.member.ban({ reason: "‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" });
        await sendLog(guild, `üî® <@${message.author.id}> ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°`);
      } catch (error) {
        await lockChannel(message.channel, guild, "‡∏™‡πÅ‡∏õ‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡∏ô‡πÑ‡∏î‡πâ");
        console.error("Failed to ban for spam:", error);
      }
      spamMap.delete(message.author.id);
    }
  }

  // Anti-Link
  if (config.antiLink && !isAdmin) { // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç !isAdmin
    const linkRegex = /(discord\.gg|discordapp\.com\/invite|discord\.com\/invite|token|https?:\/\/[^\s]+)/i;
    if (linkRegex.test(message.content)) {
      try {
        await message.delete();
        await message.member.ban({ reason: "‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°" });
        await sendLog(guild, `üî® <@${message.author.id}> ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏°`);
      } catch (error) {
        await lockChannel(message.channel, guild, "‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πâ‡∏≤‡∏° ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡∏ô‡πÑ‡∏î‡πâ");
        console.error("Failed to ban for link:", error);
      }
    }
  }

  // Anti-Mention (‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ > 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
  if (config.antiMention && !isAdmin) {
    const mentions = (message.content.match(/@everyone|@here/gi) || []).length;
    if (mentions > 0) {
      const count = (mentionMap.get(message.author.id) || 0) + mentions;
      mentionMap.set(message.author.id, count);

      if (count > MENTION_LIMIT) {
        try {
          await message.delete(); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          await message.member.ban({ reason: "Mention ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏£‡∏ß‡∏°" });
          await sendLog(guild, `üî® <@${message.author.id}> ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ mention @everyone/@here ‡πÄ‡∏Å‡∏¥‡∏ô 3 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`);
        } catch (error) {
          await lockChannel(message.channel, guild, "Mass mention ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡∏ô‡πÑ‡∏î‡πâ");
          console.error("Failed to ban for mention:", error);
        }
        mentionMap.delete(message.author.id);
      }
    }
  }

  // Anti-Mention 2 (‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á)
  if (config.antiMention2 && !isAdmin) {
    const mentions = (message.content.match(/@everyone|@here/gi) || []).length;
    if (mentions > 0) {
      try {
        await message.delete(); // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        await message.member.ban({ reason: "Mention @everyone ‡∏´‡∏£‡∏∑‡∏≠ @here" });
        await sendLog(guild, `üî® <@${message.author.id}> ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å mention @everyone/@here`);
      } catch (error) {
        await lockChannel(message.channel, guild, "Mass mention 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ö‡∏ô‡πÑ‡∏î‡πâ");
        console.error("Failed to ban for mention 2:", error);
      }
    }
  }
});

// ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå GuildMemberUpdate
client.on(Events.GuildMemberUpdate, async (oldMember, newMember) => {
  if (!config.adminMonitor) return;

  const addedRoles = newMember.roles.cache.filter((role) => !oldMember.roles.cache.has(role.id));
  const adminRoles = newMember.guild.roles.cache.filter((r) =>
    r.permissions.has(PermissionsBitField.Flags.Administrator)
  );

  for (const [roleId, role] of adminRoles) {
    if (addedRoles.has(roleId)) {
      try {
        await newMember.roles.remove(role, "Admin role granted (auto-remove)");
        await sendLog(newMember.guild, `‚ö†Ô∏è <@${newMember.id}> ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏¢‡∏®‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô **${role.name}** ‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏õ‡∏•‡∏î‡∏¢‡∏®‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`);
      } catch (error) {
        console.error("Failed to remove admin role:", error);
      }
    }
  }
});

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡πà‡∏≠‡∏á log
async function ensureLogChannel(guild) {
  let logCh = guild.channels.cache.find((ch) => ch.name === "ùó£ùóøùóºùòÅùó≤ùó∞ùòÅùó∂ùóºùóª" && ch.isTextBased());
  if (!logCh) {
    logCh = await guild.channels.create({
      name: "ùó£ùóøùóºùòÅùó≤ùó∞ùòÅùó∂ùóºùóª",
      type: 0,
      permissionOverwrites: [
        {
          id: guild.roles.everyone,
          deny: [PermissionsBitField.Flags.SendMessages, PermissionsBitField.Flags.AddReactions],
        },
      ],
    });
  }
  return logCh;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á log ‡πÅ‡∏ö‡∏ö Embed
async function sendLog(guild, content) {
  const logCh = await ensureLogChannel(guild);
  const embed = new EmbedBuilder()
    .setTitle("üîî ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö AutoMod")
    .setDescription(content)
    .setColor("Orange")
    .setImage(process.env.IMG_URL || null)
    .setFooter({ text: "¬© ùó¶ùó≤ùó∞ùòÇùóøùó∂ùòÅùòÜ ùóßùóºùóøùòÇ | ‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô" })
    .setTimestamp();
  await logCh.send({ embeds: [embed] });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡πá‡∏≠‡∏Å‡∏ä‡πà‡∏≠‡∏á (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà)
async function lockChannel(channel, guild, reason) {
  try {
    await channel.permissionOverwrites.set([]);
    await channel.permissionOverwrites.edit(guild.roles.everyone, {
      SendMessages: false,
      AddReactions: false,
    });
    await sendLog(guild, `üîí ‡∏•‡πá‡∏≠‡∏Ñ‡∏´‡πâ‡∏≠‡∏á <#${channel.id}> ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å: **${reason}**`);
  } catch (error) {
    console.error(`Failed to lock channel ${channel.id}:`, error);
  }
}

// Login
client.login(process.env.TOKEN);